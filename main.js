!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=14)}([function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),i=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||e.hasOwnProperty(n)||r(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),i(n(5),e),i(n(6),e),i(n(1),e),i(n(7),e),i(n(2),e),i(n(8),e),i(n(3),e)},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.isQueryLeafNode=e.isQueryNode=e.queryTokenFromString=e.QueryToken=void 0,function(t){t[t.AND=0]="AND",t[t.OR=1]="OR",t[t.NOT=2]="NOT",t[t.SHARED=3]="SHARED"}(r=e.QueryToken||(e.QueryToken={})),e.queryTokenFromString=function(t){switch(null==t?void 0:t.toLowerCase()){case"and":return r.AND;case"or":return r.OR;case"not":return r.NOT;case"shared":return r.SHARED;default:return null}},e.isQueryNode=function(t){return void 0!==t.token},e.isQueryLeafNode=function(t){return void 0!==t.typeStr}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.QueryBuilder=e.createQueryFromIdentifierList=void 0;var r,i=n(1);!function(t){t[t.Node=0]="Node",t[t.LeafNode=1]="LeafNode"}(r||(r={})),e.createQueryFromIdentifierList=function(t){var e=!1,n=function(t){for(var r=new o,s=0;s<t.length;s++){var u=t[s].split("[");r.identifier(u[0]);var a=s===t.length-1,c=!e&&!a&&t[s+1].split("[").length>1;if(a||c){if(c){e=!0,r.token(i.QueryToken.OR),r.token(i.QueryToken.SHARED),r.append(n(t.slice(s+1,t.length)));break}}else r.token(i.QueryToken.AND)}return r.build()};return n(t)};var o=function(){function t(t){return this.root=t||{token:null},this.currentNode=this.root,this}return Object.defineProperty(t.prototype,"workingNode",{get:function(){return this.currentNode},enumerable:!1,configurable:!0}),t.prototype.identifier=function(t){return this.lastChange===r.LeafNode||(this.lastChange=r.LeafNode,this.currentNode.leftChild?this.currentNode.rightChild||(this.currentNode.rightChild={typeStr:t}):this.currentNode.leftChild={typeStr:t}),this},t.prototype.token=function(t){if(this.lastChange=r.Node,null===this.currentNode.token)this.currentNode.token=t;else if(this.currentNode.leftChild){if(this.currentNode.rightChild){var e=this.currentNode.rightChild;this.currentNode.rightChild={token:t,leftChild:e}}else this.currentNode.rightChild={token:t};this.currentNode=this.currentNode.rightChild}else this.currentNode.leftChild={token:t},this.currentNode=this.currentNode.leftChild;return this},t.prototype.append=function(t){if(this.lastChange!==r.LeafNode)if(this.currentNode.leftChild)if(this.currentNode.rightChild){this.currentNode.rightChild;this.currentNode.rightChild={token:i.QueryToken.AND,leftChild:t}}else this.currentNode.rightChild=t;else this.currentNode.leftChild=t},t.prototype.build=function(){var t=this.root;return this.root={token:null},this.currentNode=this.root,null===t.token&&(t.token=i.QueryToken.OR),t},t}();e.QueryBuilder=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DispatchSubject=void 0;var r=function(){function t(){this.observers=[]}return t.prototype.subscribe=function(t){this.observers.indexOf(t)>=0||this.observers.push(t)},t.prototype.unsubscribe=function(t){var e=this.observers.indexOf(t);e<0||this.observers.splice(e,1)},t.prototype.trigger=function(t){this.observers.forEach((function(e){return e(t)})),this.observers.length>0&&(this.observers=[])},t}();e.DispatchSubject=r},,function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,n){"use strict";var r=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.ECSManager=e.EntityBuilder=void 0;var i=n(1),o=n(3),s=n(2),u=n(9),a=n(10),c=function(){function t(t,e){this.id=t,this.ecsManager=e}return Object.defineProperty(t.prototype,"entityId",{get:function(){return this.id},enumerable:!1,configurable:!0}),t.prototype.addComponent=function(t,e){return this.ecsManager.addComponent(this.id,t,e,this)},t.prototype.removeComponent=function(t){return this.ecsManager.removeComponent(this.id,t,this)},t}();e.EntityBuilder=c;var l=function(){function t(){this.events=[],this.systems=[],this.entities=[],this.components=new Map,this.entityId=0,this.afterUpdateLoop=new o.DispatchSubject,this.isRunningSystems=!1}return t.prototype.registerEventWithEscQuery=function(t,e){return this.events.push({query:e,qResult:this.queryEntities(e),system:t}),this.events.length-1},t.prototype.registerEvent=function(t,e){var n=s.createQueryFromIdentifierList(e);return this.registerEventWithEscQuery(t,n)},t.prototype.registerSystemWithEscQuery=function(t,e){this.systems.push({query:e,qResult:this.queryEntities(e),system:t})},t.prototype.registerSystem=function(t,e){var n=s.createQueryFromIdentifierList(e);this.registerSystemWithEscQuery(t,n)},t.prototype.createEntity=function(){return this.entities.push({id:this.entityId++}),new c(this.entityId-1,this)},t.prototype.registerComponentType=function(t,e){this.components.has(t)||this.components.set(t,new u.ComponentPool(e))},t.prototype.addComponent=function(t,e,n,r){var i=this,o=function(e){return null!=e?e:new c(t,i)};if(this.components.has(e)){var s=this.components.get(e);if(!(null==s?void 0:s.find((function(e){return e.entityId===t}))))return this.isRunningSystems?(this.afterUpdateLoop.subscribe((function(){i.addComponent(t,e,n)})),o(r)):(s.add(t,n),this.invalidateQueryResults(e),o(r))}},t.prototype.removeComponent=function(t,e,n){var r=this;if(!this.isRunningSystems)return this.components.get(e).remove(t),this.invalidateQueryResults(e),null!=n?n:new c(t,this);this.afterUpdateLoop.subscribe((function(){r.removeComponent(t,e)}))},t.prototype.queryEntities=function(t){var e,n,o,s,u=this,c=function(t,e){var n,i,o=t.findIndex((function(t){return t.id===e.id}));if(o<0)t.push(e);else{var s=function(e){t[o].components.find((function(t){return t===e}))||t[o].components.push(e)};try{for(var u=r(e.components),a=u.next();!a.done;a=u.next()){s(a.value)}}catch(t){n={error:t}}finally{try{a&&!a.done&&(i=u.return)&&i.call(u)}finally{if(n)throw n.error}}}return t},l=function(t){var e;if(!t)return[];if(!i.isQueryNode(t)){var n=t.typeStr,o=u.components.get(n);return null!==(e=null==o?void 0:o.filter((function(t){return a.isNumber(t.entityId)&&t.entityId>=0})).reduce((function(t,e,r){var i=t.findIndex((function(t){return t.id===e.entityId})),o={typeStr:n,index:r};if(i<0){var s={id:e.entityId,components:[o]};t.push(s)}else{t[i].components.find((function(t){return t.index===o.index&&t.typeStr===o.typeStr}))||t[i].components.push(o)}return t}),[]))&&void 0!==e?e:[]}var s=l(t.leftChild),h=l(t.rightChild);switch(t.token){case i.QueryToken.AND:return function(t,e){var n,i,o=[],s=function(t){var n=e.findIndex((function(e){return e.id===t.id}));if(n<0)return"continue";var r=e.splice(n,1);r.length>=1&&o.push({id:t.id,components:t.components.concat(r[0].components)})};try{for(var u=r(t),a=u.next();!a.done;a=u.next()){s(a.value)}}catch(t){n={error:t}}finally{try{a&&!a.done&&(i=u.return)&&i.call(u)}finally{if(n)throw n.error}}return o}(s,h);case i.QueryToken.OR:return s.concat(h).reduce(c,[]);case i.QueryToken.NOT:return s.filter((function(t){return!h.find((function(e){return e.id==t.id}))}));case i.QueryToken.SHARED:return[]}},h=function(t){if(t&&!i.isQueryLeafNode(t)){if(t.token===i.QueryToken.SHARED)return t;var e=h(t.leftChild),n=h(t.rightChild);return null!=e?e:n}},f=h(t),d=l(null==f?void 0:f.leftChild),p=void 0;if(d.length>0){var y=d.map((function(t){return t.components}));p=new Array(y[0].length);var v=[];try{for(var g=r(y),b=g.next();!b.done;b=g.next()){var m=b.value,w=function(t){var e=v.findIndex((function(e){return e===t.typeStr}));e<0&&(e=v.length,v.push(t.typeStr)),p[e]?p[e]=p[e].concat(S.components.get(t.typeStr).unsafeGet(t.index)):p[e]=[S.components.get(t.typeStr).unsafeGet(t.index)]},S=this;try{for(var E=(o=void 0,r(m)),x=E.next();!x.done;x=E.next()){w(x.value)}}catch(t){o={error:t}}finally{try{x&&!x.done&&(s=E.return)&&s.call(E)}finally{if(o)throw o.error}}}}catch(t){e={error:t}}finally{try{b&&!b.done&&(n=g.return)&&n.call(g)}finally{if(e)throw e.error}}}return{sharedArgs:p,entities:l(t)}},t.prototype.accessComponentData=function(t,e){var n,r=this.components.get(e);return null===(n=null==r?void 0:r.find((function(e){return e.entityId===t})))||void 0===n?void 0:n.data},t.prototype.onEvent=function(t,e){var n,i;this.isRunningSystems=!0;var o=this.events[t],s=[e];try{for(var u=r(o.qResult.entities),a=u.next();!a.done;a=u.next()){var c=a.value,l=s.concat(this.createArgs(c));this.events[t].system.apply(null,l.concat(o.qResult.sharedArgs))}}catch(t){n={error:t}}finally{try{a&&!a.done&&(i=u.return)&&i.call(u)}finally{if(n)throw n.error}}this.isRunningSystems=!1,this.afterUpdateLoop.trigger()},t.prototype.dispatch=function(){var t,e,n,i;this.isRunningSystems=!0,this.prevRun=this.prevRun?this.prevRun:Date.now();var o=Date.now(),s=[(o-this.prevRun)/1e3];try{for(var u=r(this.systems),a=u.next();!a.done;a=u.next()){var c=a.value;try{for(var l=(n=void 0,r(c.qResult.entities)),h=l.next();!h.done;h=l.next()){var f=h.value,d=s.concat(this.createArgs(f));c.system.apply(null,d.concat(c.qResult.sharedArgs))}}catch(t){n={error:t}}finally{try{h&&!h.done&&(i=l.return)&&i.call(l)}finally{if(n)throw n.error}}}}catch(e){t={error:e}}finally{try{a&&!a.done&&(e=u.return)&&e.call(u)}finally{if(t)throw t.error}}this.isRunningSystems=!1,this.afterUpdateLoop.trigger(),this.prevRun=o},t.prototype.createArgs=function(t){var e,n,i=[];try{for(var o=r(t.components),s=o.next();!s.done;s=o.next()){var u=s.value,a=this.components.get(u.typeStr).unsafeGet(u.index);i.push(a)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}return i},t.prototype.invalidateQueryResults=function(t){var e,n,o,s,u=this,a=function(t,e){return!!e&&(i.isQueryNode(e)?!!a(t,e.leftChild)||!!a(t,e.rightChild):e.typeStr===t)},c=function(e){return a(t,e.query)?u.queryEntities(e.query):e.qResult};try{for(var l=r(this.systems),h=l.next();!h.done;h=l.next()){(p=h.value).qResult=c(p)}}catch(t){e={error:t}}finally{try{h&&!h.done&&(n=l.return)&&n.call(l)}finally{if(e)throw e.error}}try{for(var f=r(this.events),d=f.next();!d.done;d=f.next()){var p;(p=d.value).qResult=c(p)}}catch(t){o={error:t}}finally{try{d&&!d.done&&(s=f.return)&&s.call(f)}finally{if(o)throw o.error}}},t}();e.ECSManager=l},function(t,e,n){"use strict";var r=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.ComponentPool=void 0;var i=function(){function t(t,e){void 0===e&&(e=20),this.stride=e,this.pool=[],this.length=0,this.pos=0,this.defaultValue=t,this.onExpandPool(!0)}return t.prototype.add=function(t,e){this.length>=this.pool.length&&this.onExpandPool(),this.pool[this.length].entityId=t;var n=null!=e?e:this.defaultValue;this.deepAssign(this.pool[this.length].data,n),this.length+=1},t.prototype.remove=function(t){var e=this.pool.findIndex((function(e){return e.entityId===t}));if(!(e<0)){var n=this.pool[e],r=this.length-1;this.pool[e]=this.pool[r],n.entityId=-1,this.pool[r]=n,this.length=r}},t.prototype[Symbol.iterator]=function(){return this},t.prototype.next=function(){return this.pos<this.length?{done:!1,value:this.pool[this.pos++]}:(this.pos=0,{done:!0,value:null})},t.prototype.unsafeGet=function(t){return this.pool[t]},t.prototype.find=function(t,e){var n,i;try{for(var o=r(this),s=o.next();!s.done;s=o.next()){var u=s.value;if(t(u,0,this.pool))return this.pos=0,u}}catch(t){n={error:t}}finally{try{s&&!s.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}return null},t.prototype.filter=function(t,e){var n,i,o=[],s=0;try{for(var u=r(this),a=u.next();!a.done;a=u.next()){var c=a.value;t(c,s,this.pool)&&o.push(c),s+=1}}catch(t){n={error:t}}finally{try{a&&!a.done&&(i=u.return)&&i.call(u)}finally{if(n)throw n.error}}return o},t.prototype.onExpandPool=function(t){t?this.pool=new Array(this.stride):this.pool.length+=this.stride;for(var e=this.length;e<this.pool.length;e++)this.pool[e]={entityId:-1,data:this.deepCopy(this.defaultValue)}},t.prototype.deepCopy=function(t){if(!t||"object"!=typeof t)return t;var e=Array.isArray(t)?[]:{};for(var n in t)e[n]=this.deepCopy(t[n]);return e},t.prototype.deepAssign=function(t,e){for(var n in Object.assign(t,e),e)"object"==typeof t[n]&&this.deepAssign(t[n],e[n])},t}();e.ComponentPool=i},function(t,e,n){(function(t){var r=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++)n[e[r]]=Object.getOwnPropertyDescriptor(t,e[r]);return n},i=/%[sdj%]/g;e.format=function(t){if(!g(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(u(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,o=r.length,s=String(t).replace(i,(function(t){if("%%"===t)return"%";if(n>=o)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}})),a=r[n];n<o;a=r[++n])y(a)||!w(a)?s+=" "+a:s+=" "+u(a);return s},e.deprecate=function(n,r){if(void 0!==t&&!0===t.noDeprecation)return n;if(void 0===t)return function(){return e.deprecate(n,r).apply(this,arguments)};var i=!1;return function(){if(!i){if(t.throwDeprecation)throw new Error(r);t.traceDeprecation?console.trace(r):console.error(r),i=!0}return n.apply(this,arguments)}};var o,s={};function u(t,n){var r={seen:[],stylize:c};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),p(n)?r.showHidden=n:n&&e._extend(r,n),b(r.showHidden)&&(r.showHidden=!1),b(r.depth)&&(r.depth=2),b(r.colors)&&(r.colors=!1),b(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=a),l(r,t,r.depth)}function a(t,e){var n=u.styles[e];return n?"["+u.colors[n][0]+"m"+t+"["+u.colors[n][1]+"m":t}function c(t,e){return t}function l(t,n,r){if(t.customInspect&&n&&x(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,t);return g(i)||(i=l(t,i,r)),i}var o=function(t,e){if(b(e))return t.stylize("undefined","undefined");if(g(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(v(e))return t.stylize(""+e,"number");if(p(e))return t.stylize(""+e,"boolean");if(y(e))return t.stylize("null","null")}(t,n);if(o)return o;var s=Object.keys(n),u=function(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}(s);if(t.showHidden&&(s=Object.getOwnPropertyNames(n)),E(n)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return h(n);if(0===s.length){if(x(n)){var a=n.name?": "+n.name:"";return t.stylize("[Function"+a+"]","special")}if(m(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(S(n))return t.stylize(Date.prototype.toString.call(n),"date");if(E(n))return h(n)}var c,w="",T=!1,C=["{","}"];(d(n)&&(T=!0,C=["[","]"]),x(n))&&(w=" [Function"+(n.name?": "+n.name:"")+"]");return m(n)&&(w=" "+RegExp.prototype.toString.call(n)),S(n)&&(w=" "+Date.prototype.toUTCString.call(n)),E(n)&&(w=" "+h(n)),0!==s.length||T&&0!=n.length?r<0?m(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),c=T?function(t,e,n,r,i){for(var o=[],s=0,u=e.length;s<u;++s)O(e,String(s))?o.push(f(t,e,n,r,String(s),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(f(t,e,n,r,i,!0))})),o}(t,n,r,u,s):s.map((function(e){return f(t,n,r,u,e,T)})),t.seen.pop(),function(t,e,n){if(t.reduce((function(t,e){return e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(c,w,C)):C[0]+w+C[1]}function h(t){return"["+Error.prototype.toString.call(t)+"]"}function f(t,e,n,r,i,o){var s,u,a;if((a=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?u=a.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):a.set&&(u=t.stylize("[Setter]","special")),O(r,i)||(s="["+i+"]"),u||(t.seen.indexOf(a.value)<0?(u=y(n)?l(t,a.value,null):l(t,a.value,n-1)).indexOf("\n")>-1&&(u=o?u.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+u.split("\n").map((function(t){return"   "+t})).join("\n")):u=t.stylize("[Circular]","special")),b(s)){if(o&&i.match(/^\d+$/))return u;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+u}function d(t){return Array.isArray(t)}function p(t){return"boolean"==typeof t}function y(t){return null===t}function v(t){return"number"==typeof t}function g(t){return"string"==typeof t}function b(t){return void 0===t}function m(t){return w(t)&&"[object RegExp]"===T(t)}function w(t){return"object"==typeof t&&null!==t}function S(t){return w(t)&&"[object Date]"===T(t)}function E(t){return w(t)&&("[object Error]"===T(t)||t instanceof Error)}function x(t){return"function"==typeof t}function T(t){return Object.prototype.toString.call(t)}function C(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(n){if(b(o)&&(o=t.env.NODE_DEBUG||""),n=n.toUpperCase(),!s[n])if(new RegExp("\\b"+n+"\\b","i").test(o)){var r=t.pid;s[n]=function(){var t=e.format.apply(e,arguments);console.error("%s %d: %s",n,r,t)}}else s[n]=function(){};return s[n]},e.inspect=u,u.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},u.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=d,e.isBoolean=p,e.isNull=y,e.isNullOrUndefined=function(t){return null==t},e.isNumber=v,e.isString=g,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=b,e.isRegExp=m,e.isObject=w,e.isDate=S,e.isError=E,e.isFunction=x,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(12);var _=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function k(){var t=new Date,e=[C(t.getHours()),C(t.getMinutes()),C(t.getSeconds())].join(":");return[t.getDate(),_[t.getMonth()],e].join(" ")}function O(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",k(),e.format.apply(e,arguments))},e.inherits=n(13),e._extend=function(t,e){if(!e||!w(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t};var N="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function A(t,e){if(!t){var n=new Error("Promise was rejected with a falsy value");n.reason=t,t=n}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(N&&t[N]){var e;if("function"!=typeof(e=t[N]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,N,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,n,r=new Promise((function(t,r){e=t,n=r})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(t,r){t?n(t):e(r)}));try{t.apply(this,i)}catch(t){n(t)}return r}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),N&&Object.defineProperty(e,N,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,r(t))},e.promisify.custom=N,e.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],r=0;r<arguments.length;r++)n.push(arguments[r]);var i=n.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,s=function(){return i.apply(o,arguments)};e.apply(this,n).then((function(e){t.nextTick(s,null,e)}),(function(e){t.nextTick(A,e,s)}))}return Object.setPrototypeOf(n,Object.getPrototypeOf(e)),Object.defineProperties(n,r(e)),n}}).call(this,n(11))},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var a,c=[],l=!1,h=-1;function f(){l&&a&&(l=!1,a.length?c=a.concat(c):h=-1,c.length&&d())}function d(){if(!l){var t=u(f);l=!0;for(var e=c.length;e;){for(a=c,c=[];++h<e;)a&&a[h].run();h=-1,e=c.length}a=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||l||u(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){"use strict";n.r(e);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function o(t){return"function"==typeof t}var s=!1,u={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;s=t},get useDeprecatedSynchronousErrorHandling(){return s}};function a(t){setTimeout((function(){throw t}),0)}var c={closed:!0,next:function(t){},error:function(t){if(u.useDeprecatedSynchronousErrorHandling)throw t;a(t)},complete:function(){}},l=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();var h=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),f=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n,r=this._parentOrParents,i=this._unsubscribe,s=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,r instanceof t)r.remove(this);else if(null!==r)for(var u=0;u<r.length;++u){r[u].remove(this)}if(o(i))try{i.call(this)}catch(t){e=t instanceof h?d(t.errors):[t]}if(l(s)){u=-1;for(var a=s.length;++u<a;){var c=s[u];if(null!==(n=c)&&"object"==typeof n)try{c.unsubscribe()}catch(t){e=e||[],t instanceof h?e=e.concat(d(t.errors)):e.push(t)}}}if(e)throw new h(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function d(t){return t.reduce((function(t,e){return t.concat(e instanceof h?e.errors:e)}),[])}var p=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),y=function(t){function e(n,r,i){var o=t.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=c;break;case 1:if(!n){o.destination=c;break}if("object"==typeof n){n instanceof e?(o.syncErrorThrowable=n.syncErrorThrowable,o.destination=n,n.add(o)):(o.syncErrorThrowable=!0,o.destination=new v(o,n));break}default:o.syncErrorThrowable=!0,o.destination=new v(o,n,r,i)}return o}return i(e,t),e.prototype[p]=function(){return this},e.create=function(t,n,r){var i=new e(t,n,r);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(f),v=function(t){function e(e,n,r,i){var s,u=t.call(this)||this;u._parentSubscriber=e;var a=u;return o(n)?s=n:n&&(s=n.next,r=n.error,i=n.complete,n!==c&&(o((a=Object.create(n)).unsubscribe)&&u.add(a.unsubscribe.bind(a)),a.unsubscribe=u.unsubscribe.bind(u))),u._context=a,u._next=s,u._error=r,u._complete=i,u}return i(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=u.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):a(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;a(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),u.useDeprecatedSynchronousErrorHandling)throw t;a(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!u.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return u.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(a(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(y);var g=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function b(t){return t}function m(t){return 0===t.length?b:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var w=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,i=function(t,e,n){if(t){if(t instanceof y)return t;if(t[p])return t[p]()}return t||e||n?new y(t,e,n):new y(c)}(t,e,n);if(r?i.add(r.call(i,this.source)):i.add(this.source||u.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),u.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){u.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),!function(t){for(;t;){var e=t,n=e.closed,r=e.destination,i=e.isStopped;if(n||i)return!1;t=r&&r instanceof y?r:null}return!0}(t)?console.warn(e):t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=S(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[g]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:m(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=S(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function S(t){if(t||(t=u.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function E(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new x(t,e))}}var x=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new T(t,this.project,this.thisArg))},t}(),T=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(y);function C(t,e,n,r){return o(n)&&(r=n,n=void 0),r?C(t,e,n).pipe(E((function(t){return l(t)?r.apply(void 0,t):r(t)}))):new w((function(r){!function t(e,n,r,i,o){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var u=e;e.addEventListener(n,r,o),s=function(){return u.removeEventListener(n,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var a=e;e.on(n,r),s=function(){return a.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var c=e;e.addListener(n,r),s=function(){return c.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var l=0,h=e.length;l<h;l++)t(e[l],n,r,i,o)}i.add(s)}(t,e,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,n)}))}var _=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return i(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,n){return t.call(this)||this}return i(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(f)),k=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),O=new(function(t){function e(n,r){void 0===r&&(r=k.now);var i=t.call(this,n,(function(){return e.delegate&&e.delegate!==i?e.delegate.now():r()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return i(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(k))(_);function N(t){return!l(t)&&t-parseFloat(t)+1>=0}function A(t){return t&&"function"==typeof t.schedule}function D(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}function P(t,e){return function(n){return n.lift(new j(t,e))}}var j=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new R(t,this.predicate,this.thisArg))},t}(),R=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(y);var Q=new w((function(t){return t.complete()}));function M(t){return t?function(t){return new w((function(e){return t.schedule((function(){return e.complete()}))}))}(t):Q}var I;function z(t,e){return new w((function(n){var r=new f,i=0;return r.add(e.schedule((function(){i!==t.length?(n.next(t[i++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}function L(t,e){return e?z(t,e):new w((n=t,function(t){for(var e=0,r=n.length;e<r&&!t.closed;e++)t.next(n[e]);t.complete()}));var n}function q(t){var e=t.error;t.subscriber.error(e)}I||(I={});var H=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){var t,e;switch(this.kind){case"N":return function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return A(n)?(t.pop(),z(t,n)):L(t)}(this.value);case"E":return t=this.error,new w(e?function(n){return e.schedule(q,0,{error:t,subscriber:n})}:function(e){return e.error(t)});case"C":return M()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}();function U(t,e){void 0===e&&(e=O);var n,r=(n=t)instanceof Date&&!isNaN(+n)?+t-e.now():Math.abs(t);return function(t){return t.lift(new B(r,e))}}var B=function(){function t(t,e){this.delay=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new F(t,this.delay,this.scheduler))},t}(),F=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.delay=n,i.scheduler=r,i.queue=[],i.active=!1,i.errored=!1,i}return i(e,t),e.dispatch=function(t){for(var e=t.source,n=e.queue,r=t.scheduler,i=t.destination;n.length>0&&n[0].time-r.now()<=0;)n.shift().notification.observe(i);if(n.length>0){var o=Math.max(0,n[0].time-r.now());this.schedule(t,o)}else this.unsubscribe(),e.active=!1},e.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(e.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},e.prototype.scheduleNotification=function(t){if(!0!==this.errored){var e=this.scheduler,n=new V(e.now()+this.delay,t);this.queue.push(n),!1===this.active&&this._schedule(e)}},e.prototype._next=function(t){this.scheduleNotification(H.createNext(t))},e.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.scheduleNotification(H.createComplete()),this.unsubscribe()},e}(y),V=function(){return function(t,e){this.time=t,this.notification=e}}();function W(t){return Math.sqrt(Math.pow(t.x,2)+Math.pow(t.y,2))}function Y(t){var e=W(t);return 0===e?{x:0,y:0}:{x:t.x/e,y:t.y/e}}function G(t,e){return{x:t.x*e,y:t.y*e}}var J,$,X,Z,K=n(0),tt=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},et=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s},nt=function(){function t(t){var e=this;this.canvas=t,this.ENEMIES_SPEED=210,this.BULLET_SPEED=500,this.PLAYER_SPEED=250,this.SCORE_TEXT_SPEED=200,this.PLAYER_RECT={color:"#3f51b5",size:{x:20,y:30}},this.ENEMIES_COUNT=40,this.BULLET_COUNT=20,this.keysDown=[],this.manager=new K.ECSManager;var n={x:0,y:0};this.manager.registerComponentType("UniqueTag",{}),this.manager.registerComponentType("EnemyTag",{}),this.manager.registerComponentType("Bullet",{maxRange:800}),this.manager.registerComponentType("ScoreText",{content:"",fontSize:30,alpha:1}),this.manager.registerComponentType("ScoreTextTag",{}),this.manager.registerComponentType("Player",{score:0}),this.manager.registerComponentType("Movable",{position:n,velocity:n,speed:0}),this.manager.registerComponentType("Rectangle",{color:"#ffffff",size:{x:500,y:500}}),this.manager.registerComponentType("InactiveTag",{}),this.manager.addComponent(this.manager.createEntity().entityId,"UniqueTag");for(var r=0;r<this.ENEMIES_COUNT;r++){var i=this.manager.createEntity().entityId;this.manager.addComponent(i,"EnemyTag"),this.manager.addComponent(i,"Rectangle",{color:"#ff4081",size:{x:20,y:30}}),this.manager.addComponent(i,"Movable",{position:n,velocity:n,speed:this.ENEMIES_SPEED}),this.manager.addComponent(i,"InactiveTag")}for(r=0;r<this.BULLET_COUNT;r++){i=this.manager.createEntity().entityId;this.manager.addComponent(i,"Bullet"),this.manager.addComponent(i,"Rectangle",{color:"#ffffff",size:{x:4,y:4}}),this.manager.addComponent(i,"Movable",{position:n,velocity:n,speed:this.BULLET_SPEED}),this.manager.addComponent(i,"InactiveTag")}for(r=0;r<10;r++){i=this.manager.createEntity().entityId;this.manager.addComponent(i,"ScoreTextTag")}i=this.manager.createEntity().entityId;this.manager.addComponent(i,"Player"),this.manager.addComponent(i,"Movable",{position:{x:.5*t.width-.5*this.PLAYER_RECT.size.x,y:.5*t.height-.5*this.PLAYER_RECT.size.y},velocity:n,speed:this.PLAYER_SPEED}),this.manager.addComponent(i,"Rectangle",{color:"#3f51b5",size:{x:20,y:30}}),C(window,"keydown").pipe(E((function(t){return t})),P((function(t){return"w"===t.key||"a"===t.key||"s"===t.key||"d"===t.key}))).subscribe((function(t){return e.keysDown.push(t.key)})),C(window,"keyup").pipe(E((function(t){return t})),P((function(t){return"w"===t.key||"a"===t.key||"s"===t.key||"d"===t.key}))).subscribe((function(t){return e.keysDown=e.keysDown.filter((function(e){return e!==t.key}))}))}return t.prototype.initialize=function(){var t=this;J.initialize(this.manager,this.canvas),Z.initialize(this.manager);X.initialize(this,(function(){return Math.min(.5,1)}));$.initialize(this,(function(){return t.keysDown}))},t.prototype.dispatch=function(){this.manager.dispatch()},t}();(J||(J={})).initialize=function(t,e){var n=e.getContext("2d");!function(t,e){var n={token:K.QueryToken.AND,leftChild:{typeStr:"Rectangle"},rightChild:{token:K.QueryToken.NOT,leftChild:{typeStr:"Movable"},rightChild:{typeStr:"InactiveTag"}}};t.registerSystemWithEscQuery((function(t,n,r){e.fillStyle=n.data.color,e.fillRect(r.data.position.x,r.data.position.y,n.data.size.x,n.data.size.y)}),n)}(t,n),function(t,e){t.registerSystem((function(t,n,r){e.fillStyle="rgba(255, 255, 255, "+n.data.alpha+")",e.font=n.data.fontSize+"px serif",e.textAlign="center",e.fillText(n.data.content,r.data.position.x,r.data.position.y)}),["ScoreText","Movable"])}(t,n),function(t){t.registerSystem((function(t,e){e.data.velocity=G(Y(e.data.velocity),e.data.speed),e.data.position.x+=e.data.velocity.x*t,e.data.position.y+=e.data.velocity.y*t}),["Movable"])}(t),function(t){t.registerSystem((function(e,n,r){r.data.speed-=80*e,n.data.fontSize+=20*e,n.data.alpha-=.4*e,r.data.speed<30&&(t.removeComponent(n.entityId,"ScoreText"),t.removeComponent(r.entityId,"Movable"))}),["ScoreText","Movable"])}(t)},($||($={})).initialize=function(t,e){var n,r,i,o,s;!function(t,e){t.registerSystem((function(t,n,r){var i,o,s=e();try{for(var u=tt(s),a=u.next();!a.done;a=u.next())switch(a.value){case"w":r.data.velocity.y=-1;break;case"a":r.data.velocity.x=-1;break;case"s":r.data.velocity.y=1;break;case"d":r.data.velocity.x=1}}catch(t){i={error:t}}finally{try{a&&!a.done&&(o=u.return)&&o.call(u)}finally{if(i)throw i.error}}r.data.velocity=G(Y(r.data.velocity),r.data.speed),r.data.position.x+=r.data.velocity.x*t,r.data.position.y+=r.data.velocity.y*t,r.data.velocity.x=0,r.data.velocity.y=0}),["Player","Movable"])}(t.manager,e),n=t.manager,r=t.canvas,i=t.BULLET_SPEED,o={token:K.QueryToken.AND,leftChild:{typeStr:"Player"},rightChild:{token:K.QueryToken.AND,leftChild:{typeStr:"Movable"},rightChild:{token:K.QueryToken.OR,leftChild:{typeStr:"Rectangle"},rightChild:{token:K.QueryToken.SHARED,leftChild:{token:K.QueryToken.AND,leftChild:{typeStr:"Bullet"},rightChild:{token:K.QueryToken.AND,leftChild:{typeStr:"Movable"},rightChild:{typeStr:"InactiveTag"}}}}}}},s=n.registerEventWithEscQuery((function(t,e,o,s,u,a,c){if(!((null==u?void 0:u.length)<0)){var l=t,h=o.data.position.x+.5*s.data.size.x,f=o.data.position.y+.5*s.data.size.y,d=Y({x:l.clientX-h-r.offsetLeft,y:l.clientY-f-r.offsetTop}),p=G(d,20);n.removeComponent(u[0].entityId,"InactiveTag"),a[0].data.position={x:h+p.x,y:f+p.y},a[0].data.velocity=d,a[0].data.speed=i}}),o),C(r,"click").subscribe((function(t){return n.onEvent(s,t)}))},(X||(X={})).initialize=function(t,e){var n,r;n=t.manager,r={token:K.QueryToken.AND,leftChild:{typeStr:"EnemyTag"},rightChild:{token:K.QueryToken.NOT,leftChild:{typeStr:"Movable"},rightChild:{token:K.QueryToken.OR,leftChild:{typeStr:"InactiveTag"},rightChild:{token:K.QueryToken.SHARED,leftChild:{token:K.QueryToken.AND,leftChild:{typeStr:"Player"},rightChild:{typeStr:"Movable"}}}}}},n.registerSystemWithEscQuery((function(t,e,n,r,i){n.data.velocity={x:i[0].data.position.x-n.data.position.x,y:i[0].data.position.y-n.data.position.y}}),r),function(t,e,n,r){var i={token:K.QueryToken.OR,leftChild:{typeStr:"UniqueTag"},rightChild:{token:K.QueryToken.SHARED,leftChild:{token:K.QueryToken.AND,leftChild:{typeStr:"EnemyTag"},rightChild:{token:K.QueryToken.AND,leftChild:{typeStr:"Movable"},rightChild:{typeStr:"InactiveTag"}}}}},o=function(t,e,n){void 0===t&&(t=0);var r=-1;return N(e)?r=Number(e)<1?1:Number(e):A(e)&&(n=e),A(n)||(n=O),new w((function(e){var i=N(t)?t:+t-n.now();return n.schedule(D,i,{index:0,period:r,subscriber:e})}))}(2e3,1e3).pipe(U(Math.random()*(3-3.5*r()))),s=t.registerEventWithEscQuery((function(r,i,o,s,u){if(o){var a,c;if(Math.random()>.5){a=Math.random()*e.width;var l=200*Math.random();c=Math.random()>.5?e.height+l:-l}else c=Math.random()*e.height,l=200*Math.random(),a=Math.random()>.5?e.width+l:-l;t.removeComponent(o[0].entityId,"InactiveTag"),s[0].data.position={x:a,y:c},s[0].data.velocity={x:0,y:0},s[0].data.speed=n}}),i);o.subscribe((function(){return t.onEvent(s,null)}))}(t.manager,t.canvas,t.ENEMIES_SPEED,e)},(Z||(Z={})).initialize=function(t){!function(t){var e={token:K.QueryToken.AND,leftChild:{typeStr:"Bullet"},rightChild:{token:K.QueryToken.NOT,leftChild:{typeStr:"Movable"},rightChild:{token:K.QueryToken.OR,leftChild:{typeStr:"InactiveTag"},rightChild:{token:K.QueryToken.SHARED,leftChild:{token:K.QueryToken.AND,leftChild:{typeStr:"Player"},rightChild:{typeStr:"Movable"}}}}}};t.registerSystemWithEscQuery((function(e,n,r,i,o){Math.abs(W(r.data.position)-W(o[0].data.position))>n.data.maxRange&&t.addComponent(r.entityId,"InactiveTag")}),e)}(t),function(t){var e={token:K.QueryToken.AND,leftChild:{typeStr:"Rectangle"},rightChild:{token:K.QueryToken.AND,leftChild:{typeStr:"Movable"},rightChild:{token:K.QueryToken.NOT,leftChild:{typeStr:"Bullet"},rightChild:{token:K.QueryToken.OR,leftChild:{typeStr:"InactiveTag"},rightChild:{token:K.QueryToken.SHARED,leftChild:{token:K.QueryToken.AND,leftChild:{typeStr:"Rectangle"},rightChild:{token:K.QueryToken.AND,leftChild:{typeStr:"Movable"},rightChild:{token:K.QueryToken.OR,leftChild:{token:K.QueryToken.NOT,leftChild:{typeStr:"EnemyTag"},rightChild:{typeStr:"InactiveTag"}},rightChild:{typeStr:"Player"}}}}}}}}},n={token:K.QueryToken.NOT,leftChild:{typeStr:"ScoreTextTag"},rightChild:{typeStr:"ScoreText"}};t.registerSystemWithEscQuery((function(e,r,i,o,s,u,a,c){var l,h,f,d,p,y,v,g,b,m;if(a&&c)try{for(var w=tt(a.entries()),S=w.next();!S.done;S=w.next()){var E=et(S.value,2),x=E[0],T=(E[1],s[x]),C=u[x];if(p=r.data,y=i.data,v=T.data,g=C.data,b=void 0,m=void 0,b=Math.abs(y.position.x-g.position.x),m=Math.abs(y.position.y-g.position.y),b<p.size.x&&m<p.size.y||b<v.size.x&&m<v.size.y){c[0].data.score+=10,t.addComponent(o.entityId,"InactiveTag"),t.addComponent(C.entityId,"InactiveTag");var _=null===(d=null===(f=t.queryEntities(n))||void 0===f?void 0:f.entities[0])||void 0===d?void 0:d.id;if(!isNaN(_)){var k=u[u.length-1].data;t.addComponent(_,"ScoreText",{content:""+c[0].data.score,fontSize:30,alpha:1}),t.addComponent(_,"Movable",{position:{x:k.position.x,y:k.position.y},velocity:{x:0,y:-1},speed:200})}}}}catch(t){l={error:t}}finally{try{S&&!S.done&&(h=w.return)&&h.call(w)}finally{if(l)throw l.error}}}),e)}(t)},C(window,"DOMContentLoaded").subscribe((function(){var t=document.getElementById("waveShootCanvas");if(t){var e=function(){t.width=window.innerWidth,t.height=window.innerHeight};C(window,"resize").subscribe(e),e();var n=new nt(t);n.initialize();var r=t.getContext("2d"),i=(Date.now(),function(){var e=Date.now();r.fillStyle="#000000",r.fillRect(0,0,t.width,t.height),n.dispatch(),e,window.requestAnimationFrame(i)});window.requestAnimationFrame(i)}else console.error("failed to load canvas!")}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,